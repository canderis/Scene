/*
 * File: app/view/ProfileCreationForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Scene.view.ProfileCreationForm', {
	extend: 'Ext.form.Panel',
	alias: 'widget.profilecreationform',

	requires: [
		'Scene.view.ProfileCreationFormViewModel',
		'Ext.Label',
		'Ext.Button',
		'Ext.dataview.List',
		'Ext.XTemplate',
		'Ext.TitleBar'
	],

	viewModel: {
		type: 'profilecreationform'
	},
	height: '100%',
	layout: 'fit',
	defaultListenerScope: true,

	listeners: {
		show: 'onFormpanelShow'
	},
	items: [
		{
			xtype: 'container',
			items: [
				{
					xtype: 'label',
					html: 'Enter your likes and dislikes to help us provide better event suggestions for you!'
				},
				{
					xtype: 'button',
					height: '20%',
					itemId: 'done',
					width: '100%',
					bottom: 0,
					text: 'Done',
					listeners: {
						tap: 'onDoneTap'
					}
				},
				{
					xtype: 'list',
					itemId: 'choices',
					mode: 'MULTI',
					itemTpl: [
						'<div>{name}</div>'
					],
					onItemDisclosure: 'listDisclosure',
					bind: {
						store: '{ProfileChoices}'
					}
				},
				{
					xtype: 'list',
					hidden: true,
					itemId: 'options',
					mode: 'MULTI',
					itemTpl: [
						'<div>{option}</div>'
					],
					bind: {
						store: '{ProfileOptions}'
					}
				}
			]
		},
		{
			xtype: 'titlebar',
			docked: 'top',
			title: 'Create Profile',
			items: [
				{
					xtype: 'button',
					hidden: true,
					itemId: 'continue',
					text: '<',
					listeners: {
						tap: 'onContinueTap'
					}
				}
			]
		}
	],

	onFormpanelShow: function(component, eOpts) {
		AERP.Ajax.request({
			url:'/SceneRequest/get_current_profile_categories',
			//params: selectedItem,
			success:function(response) {

				//console.log(response);
				this.neededInfo = response.data;
				//console.log(this.neededInfo);
				var profileChoicesStore = this.getViewModel().getStore('ProfileChoices');

				this.neededInfo.forEach(function(record, i){
					//var disclosure = false;
					//if(record.choiceType!==1)
						//disclosure = true;

					profileChoicesStore.loadData([[record.id, record.name, i ]] , true);
				});

			},
			failure:function(response) {

			},
			scope:this
		});

	},

	onDoneTap: function(button, e, eOpts) {
		//console.log();
		this.fireEvent('finishedProfile', this.selectedOptions);
	},

	onContinueTap: function(button, e, eOpts) {
		if(!this.selectedOptions){
			this.selectedOptions = [];
		}

		var options = this.queryById('options');
		this.queryById('choices').show();
		this.queryById('done').show();
		this.queryById('continue').hide();

		options.hide();


		var selected = options.getSelections();
		//console.log(selected);
		for (var key in selected) {
			//console.log(selected[key]);
			this.selectedOptions.push({
				option: selected[key].data.option,
				profile_options_id: selected[key].data.profile_options_id
			});
		}

	},

	listDisclosure: function(record) {
		//console.log(record);
		//console.log(this.neededInfo);

		var option = this.neededInfo[record.data.indicator];
		var options = this.queryById('options');
		options.deselectAll();
		if(option.choiceType == 1){
			options.setMode('SINGLE');
		}
		else{
			options.setMode('MULTI');
		}
		//console.log(option);
		this.getViewModel().getStore('ProfileOptions').loadData(option.options);
		//console.log(this.getViewModel().getStore('ProfileOptions'));

		this.queryById('choices').hide();
		this.queryById('done').hide();
		this.queryById('continue').show();

		options.show();
	}

});